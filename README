To do
=====

Syntax

  defining and creating components
  input, output, connect

Semantics

  inheritance
    explicit, calculated before run, cached
    implicit, based on ruby inheritance
    Exit transition

  math
    complex numbers
    matrices
  
  metaclasses
  
  discrete evolution
    more flexibility: start actions as well as finish actions

  
Implementation

  optimization
    profiling
    compare with shift, matlab
    integration method
    flows
    guards
    dual mode

  math
    mixing runge-kutta 4 with euler
    var step
    symbolic integration

  debugging, logging
    use AspectR
  
  run time error checking
  exception handling
    syntax errors, esp. in flows, guards
  
  unit tests
  
  system tests
    compare with other integrators

User interface

  command-line debugger
    inspect methods
    
  gui debugger
  output to gnuplot

Documentation

  differences from cshift
    no mixing scopes in create, as in "create(Foo, x := x)"
    'self.x = ...'
    
