redshift 1.3.14

- Safer handling of C expressions using parens on RHS.

- Removed enum/op dependency.

- Small doc and comment changes.

- Cleaned up examples.

- Component#transition checks that operands are states.

- Fixed connect strict test.

- Fixed test_queue.rb on x86-64.

- Fixed CFLAGS for x86-64 in bench/formula.rb.

redshift 1.3.13

- Added test in test_discrete.

redshift 1.3.12

- Fixed bug with explicitly assigning an array to a 
  delay buffer.

- Raise if time_step changes while using delay.

redshift 1.3.11

- Expressions can refer to module constants

- More bits reserved for transition index.

redshift 1.3.10

- Varying time-step works.

redshift 1.3.9

- This works: connect :foo => nil

- Added test_connect_parallel.rb.

redshift 1.3.8

- Ports can be connected in parallel with resets.

- Component#inspect, when called during a transition, shows the
  transition destination and the exported events and values.

- Link resets accept literal nil value.

redshift 1.3.7

- Link resets can be expressions.

redshift 1.3.6

- All expressions can include "lnk.lnk" terms.

redshift 1.3.5

- Component.strict sets strict independently of var declaration.

- Component#dest= changes the dest state during a transition.

- Added examples/{scheduler.rb,set-dest.rb}.

redshift 1.3.4

- Reset exprs can refer to events and linked events.

- Improved examples/collide.rb.

- Added examples/{sync-deadlock.rb,reset-with-event-val.rb}.

redshift 1.3.3

- Failed syncs are followed by attempts to continue evaluating further
  transitions.

- Fixed bug: sync clause did not clear strict flag. Bug was also causing
  bench/discrete.rb to report incorrect results.

redshift 1.3.2

- Clear discrete_step and zeno_counter at end of discrete_update.

- Component#inspect arg is a hash of options.

redshift 1.3.1

- Events have values throughout discrete step, excluding guard and sync.
  (Incompatible change.)

- Removed event guards (since events do not have values during guard).
  (Incompatible change.)

- Fixed bug with 'start Exit'.

redshift 1.2.41

- Added sync clause to transitions, for unambiguous synchronization.

- Improved message for reset type error.

- Link vars can now be declared without a type (defaults to Component).
 
- Fixed Queue behavior when #unpop called with SimultaneousQueueEntries.

- Added examples and tests.

redshift 1.2.40

- Improved test and bench for queues.

redshift 1.2.39

- Queue optimization: sleep when all guards waiting for queues.

redshift 1.2.38

- Minor changes to queue test, bench, and example code.

redshift 1.2.37

- Updated ZenoDebugger and examples/zeno.rb to work with ver 1.2 discrete step.

redshift 1.2.36

- Added queues.

redshift 1.2.35

- Replaced nr.random with sci/random and isaac in tests.

redshift 1.2.34

- Added examples/ports.rb.

- Brought hooks in world-gen.rb up to date.

- Fixed bug in euler flow introduced in 1.2.26.

redshift 1.2.33

- Refactored input variable evaluation into rs_eval_input_var().

redshift 1.2.32

- Minor refactoring and new tests related to previous.

redshift 1.2.31

- Flows and other expressions can refer to link.input_var.

redshift 1.2.30

- Fixed rs_raise() for non-AugmentedExceptions.

redshift 1.2.29

- Improved checking on strict inputs.

redshift 1.2.28

- Input ports can be connected to input ports.

- Added examples/subsystem.rb.

redshift 1.2.27

- Algebraic circularity checking no longer breaks when other exceptions happen.

- Exceptions during the execution of a simulation carry an object with them
  which can be inspected later.

- Most exceptions raised from C code use the new rs_raise() function.

redshift 1.2.26

- Moved globals into World for thread safety, reentrancy, etc.

redshift 1.2.25

- The world accessor of Component is now stored internally as World shadow
  instead of World object, to make access to World fields easier.

redshift 1.2.24

- Added input variables, connect, and ports.

- Added Library#declare_external_constant (see examples/external-lib.rb).

redshift 1.2.23

- Added examples/ball-tkar.rb.

redshift 1.2.22

- Derive flows have an option for feedback and the var_init_rhs setter.

- Read RUBY_SOURCE_FILE env var as alternative for library name (for IDE).

redshift 1.2.21

- Fixed another bug in delay of algebraic flows.

redshift 1.2.20

- Fixed bug in delay of algebraic flows.

- Improved interaction between euler flow and derive and rk4 flows.

redshift 1.2.19

- Fixed roundoff problem with variable delay (new fix).

- Fixed bug with delay of numerically integrated signal.

redshift 1.2.18

- Fixed bug in Flow#translate with reusing the optional formula string.

- Some improvements in error reporting.

- Fixed roundoff problem with variable delay.

redshift 1.2.17

- Added examples/simulink/delay.mdl and error comparison code in
  examples/delay.rb.

redshift 1.2.16

- Fixed bugs with delay flow and transition between 2 states.

redshift 1.2.15

- Derivative flows can be arbitrary expressions.

- Improved accuracy of numerical differentiation.

redshift 1.2.14

- Delay flows can be arbitrary expressions (as can the delay term).

redshift 1.2.13

- Fixed RedShift module scoping problem.

- Delay flows can dynamically change their delay.

redshift 1.2.12

- Fixed bug with delay defined by a constant attr.

redshift 1.2.11

- Added delay flows (for delay constant).

- Added test/test_buffer.rb and examples/delay.rb.

- Refactored flow files into c/flow/ subdir.

redshift 1.2.10

- Guards can now be one of: true, false, nil. Added tests for this..

- Fixed examples to work with new redshift and plotting interface.

redshift 1.2.9

- Added examples/external-lib.rb and some support code.

redshift 1.2.8

- Added test for derivative.

- Added examples/simulink/derivative.mdl.

redshift 1.2.7

- Changed Euler flow to operate at rk=1 rather than rk=2.

- Fixed bug introduced in 1.2 that was exposed by the above change.

- Added derivative and PID control examples.

- Added euler flow benchmark and example.

redshift 1.2.6

- Added flow class for numerical differentiation (derive " rate = u' ").

- Cleaned up flow C code output.

redshift 1.2.5

- Fixed MSVC6 compiler snags.

- Optimization to reuse guard expr wrappers when exprs are the same. Same
  for reset expr wrappers.

redshift 1.2.4

- Fixed World.open when it is called before World.new has been called.

- Minor doc cleanup and test additions.

redshift 1.2.3

- Fixed a bug in step_continuous introduced with the "diff_list" optimization.

redshift 1.2.2

- Added post actions.

- Fixed bug with "checked" flag and added a test.

- Fixed bug: alg flows must be uncached before check_strict.

redshift 1.2.1

- Revised structure of discrete step. May break some code.

redshift 1.1.59

- Optimization: use diff_list in step_continuous to scan just those components
  that have diff flows.

- Improved bechmark framework and outputs; added new benchmarks.

redshift 1.1.58

- Event values may now be C exprs. Use #literal to force literal string/proc.

redshift 1.1.57

- Changed behavior when leaving state in which var is defined by alg flow,
  and entering state with no alg flow.

- Resets are now allowed in algebraic state, even if the reset value will be
  overridden by the next alg evaluation.

redshift 1.1.56

- Misc fixes, cleanup, and tests.

redshift 1.1.55

- Re-fixed bug with order in which guards are checked.

- Defaults and setup clauses can take a hash of var=>value, as can variable
  declarations.

redshift 1.1.54

- Fixed bug with transition S=>S and strict guards.

- Fixed bug with order in which guards are checked.

redshift 1.1.53

- Fixed bug with both link.contvar and link.constant in one gaurd expr.

- Fixed bug: strict link to nonstrict variable was treated as strict.

- Optimization: strict guards checked less often. (See bench/half-strict.rb.)

redshift 1.1.52

- Added bench/half-strict.rb.

redshift 1.1.51

- Added NonStrictLink test to test_strict_continuity.rb.

redshift 1.1.50

- Optimization: algebraic flows that are current at end of step_continuous
  don't need to be evaled until d_tick > 1.

redshift 1.1.49

- Minor optimization: strict alg. vars in a non-strict alg expr or guard are
  evaled only once per discrete step.

redshift 1.1.48

- Added new benchmark framework, and the discrete and constinuous benchmarks.

redshift 1.1.47

- Optimization for 'inert' components.

- More useful interface for Component.state.

redshift 1.1.46

- Resets for links.

redshift 1.1.45

- Resets for constants.

redshift 1.1.44

- Fixed reporting of strictness violations.

- Added test/test_strict_reset_error.rb.

- Outgoing transitions are cached for each state.

redshift 1.1.43

- Optimization for strictly continuous var readers.

redshift 1.1.42

- Added runtime check for strictness violation due to transition to state
  with inconsistent algebraic equation.

redshift 1.1.41

- Added infrastructure for checking strictness and strictness violations
  at run time.

redshift 1.1.40

- Strictness violations of writers can be rescued, and the value remains set.

- Renaned ContinuousAssignmentError to StrictnessError

- World#age removed; use #evolve instead.

- Improved test_strict_continuity.rb.

redshift 1.1.39

- Added World.defaults.

redshift 1.1.38

- Added strict links.
