=begin

RedShift, like SHIFT, uses a _dataflow_ model, rather than a Von Neumann model, of computation of continuous values. Order of computation is not specified by the programmer, but it does obey the dependencies specifed by the programmer.

Flow syntax:

C expressions (operators, math functions, user-defined C functions, constants) with variables as follows:

var       -- shadow attribute of the 'self' object

link.var  -- shadow attribute of another ruby object
             link is a shadow attr of self


=end

=begin

=cflow expressions

A cflow is a flow whose formula is a C expression involving some Ruby subexpressions. The formula is compiled to executable code before the simulation runs.

The restrictions on the Ruby expressions allowed within cflow expressions are
intended to promote efficient code. The purpose of cflows is not rapid
development, or elegant model expression, but optimization. Inefficient
constructs should be rewritten. For instance, using a complex expression like

  radar_sensors[:front_left].target[4].range

will incur the overhead of recalculation each time the expression is evaluated,
even though the object which receives the (({range})) method call cannot
change during continuous evolution. Instead, use intermediate variables. Define
an instance variable ((|@front_left_target_4|)), updated when necessary during discrete evolution, and use the expression

  @front_left_target_4.range

The increase in efficiency comes at the cost of maintaining this new variable. Use of cflows should be considered only for mature, stable code. Premature optimization is the root of all evil.

ACTUALLY: only continuous variables (no methods) can be referenced in flows.

==Syntax

The syntax of algebraic and differential cflows is

  var = rhs
  var' = rhs

where rhs is a C expression, except that it may also have the following additional subexpressions in Ruby syntax:

  @ivar
  @@cvar
  @ivar.method
  @@cvar.method
  method
  self.method

The last two are equivalent. Method arguments are not allowed, nor are special methods such as []. All use of () and [] is reserved for C expressions.

Note that C has a comma operator which allows a pair (and therefore any sequence) of expressions to be evaluated, returning the value of the last one. However, on-the-fly assignments are not yet supported (see the to do list), so this isn't useful.

==Semantic restrictions

The value of each Ruby subexpression must be Float or convertible to Float (Fixnum, String, etc.).

If a receiver.method pair occurs more than once in a cflow, the method is
called only once on that receiver per evaluation of the expression. (The
expression as a whole may be evaluated several times per time-step, depending
on the integration algorithm.) Using methods that have side efffects with
caution. Typical methods used are accessors, which have no side effects.

==C interface

All functions in math.h are available in the expression. The library is generated with (({CGenerator})) (in file ((*cgen.rb*))). This is a very flexible tool:

* To statically link to other C files, simply place them in the same dir as the library (you may need to create the dir yourself unless the RedShift program has already run). To include a .h file, simply do the following somewhere in your Ruby code:

  RedShift.library.include "my-file.h"
  
or
  
  RedShift.library.include "<lib-file.h>"

The external functions declared in the .h file will be available in cflow expressions.

* Definitions can be added to the library file itself (though large definitions that do not change from run to run are better kept externally). See the (({CGenerator})) documentation for details.

==Limitations

The cflow cannot be changed or recompiled while the simulation is running. Changes are ignored. Must reload everything to change cflows (however, can change other things without restarting). This limitation will lifted eventually.

== Performance Tips

Declare a variable as strictly continuous if its value does not change except as the result of continuous time passing. The effect of this is that a guard that depends only on strictly continuous variables needs to be evaluated only once per discrete update.

==To do

* globals (store these in a unique GlobalData object)

* class vars (store these in the TypeData instance)

* constants: FOO, FOO.bar, FOO::BAR (as above)

* link1.link2.var, etc.

* WARN when variable name conflicts with ruby method.

=end


